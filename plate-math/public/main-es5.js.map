{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/calculator/calculator.component.ts","webpack:///src/app/calculator/calculator.component.html","webpack:///src/app/calculator/diagram/diagram.component.ts","webpack:///src/app/calculator/diagram/diagram.component.html","webpack:///src/app/instagrambox/instagrambox.component.ts","webpack:///src/app/metric-calculator/metric-calculator.component.ts","webpack:///src/app/metric-calculator/metric-calculator.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","CalculatorComponent","cdr","barDefaultWeights","barType","emptyBarWeight","targetWeight","barWidth","requiredWeights","weightStep","defaultPlates","value","quantity","plateColor","plates","detectChanges","barTypeId","Object","assign","totalWeight","forEach","weight","calculateRequiredPlatesBarbell","calculateRequiredPlatesDumbbells","calculateRequiredPlatesLoadingPin","weights","barbellWeight","requiredWeightPlateTotal","sort","a","b","platePairs","i","push","calculateRequiredPlates","getRequiredPlatesString","outputString","generateBarbellPlatesString","generateDumbbellPlatesString","generateLoadingPinPlatesString","plateCount","count","plate","length","filter","getBarbellPlatesCount","reverse","setBarType","DiagramComponent","InstagramboxComponent","MetricCalculatorComponent","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CalculatorComponent } from './calculator/calculator.component';\nimport { MetricCalculatorComponent } from './metric-calculator/metric-calculator.component';\n\nconst routes: Routes = [\n  { path: '', component: CalculatorComponent },\n  { path: 'metric', component: MetricCalculatorComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'plate-math';\n}\n","<header>\n  <nav>\n    <h1>Plate Math is Hard</h1>\n  </nav>\n</header>\n\n<div class=\"container\">\n  <router-outlet></router-outlet>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CalculatorComponent } from './calculator/calculator.component';\nimport { DiagramComponent } from './calculator/diagram/diagram.component';\nimport { InstagramboxComponent } from './instagrambox/instagrambox.component';\nimport { MetricCalculatorComponent } from './metric-calculator/metric-calculator.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CalculatorComponent,\n    DiagramComponent,\n    InstagramboxComponent,\n    MetricCalculatorComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-calculator',\n  templateUrl: './calculator.component.html',\n  styleUrls: ['./calculator.component.scss']\n})\nexport class CalculatorComponent implements OnInit {\n  barDefaultWeights: Array<number> = [\n    45,\n    5,\n    10\n  ];\n  \n  barType: number = 0;\n  emptyBarWeight: number = 45;\n  targetWeight: number = 45;\n  barWidth: number = 25;\n  requiredWeights: Array<{ value: number, quantity: number, plateColor: string }> = [];\n  weightStep: number = 2;\n\n  defaultPlates: Array<{ value: number, quantity: number, plateColor: string}> = [\n    { value: 45, quantity: 10, plateColor: \"#588dff\"},\n    { value: 35, quantity: 2, plateColor: \"#FFFF99\"},\n    { value: 25, quantity: 2, plateColor: \"#7FBF7F\"},\n    { value: 10, quantity: 4, plateColor: \"#FFF\"},\n    { value: 5, quantity: 2, plateColor: \"#FF9999\"},\n    { value: 2.5, quantity: 2, plateColor: \"#e94985\"},\n  ]\n\n  plates: Array<{ value: number, quantity: number, plateColor: string}> = this.defaultPlates;\n\n  constructor(private cdr: ChangeDetectorRef){}\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewChecked(): void {\n    this.cdr.detectChanges();\n  }\n\n  setBarType(barTypeId: number){\n    this.barType = barTypeId;\n    switch(barTypeId){\n      case 0: {\n        this.plates = Object.assign([], this.defaultPlates);\n        this.weightStep = 2;\n        this.emptyBarWeight = this.barDefaultWeights[0];\n        break;\n      }\n      case 1: {\n        this.emptyBarWeight = this.barDefaultWeights[1];\n        this.weightStep = 4;\n        this.plates = Object.assign([], [\n          { value: 45, quantity: 0, plateColor: \"#588dff\"},\n          { value: 35, quantity: 0, plateColor: \"#FFFF99\"},\n          { value: 25, quantity: 4, plateColor: \"#7FBF7F\"},\n          { value: 10, quantity: 8, plateColor: \"#FFF\"},\n          { value: 5, quantity: 10, plateColor: \"#FF9999\"},\n          { value: 2.5, quantity: 10, plateColor: \"#e94985\"},\n        ]);\n        break;\n      }\n      case 2: {\n        this.plates = Object.assign([], this.defaultPlates);\n        this.weightStep = 1;\n        this.emptyBarWeight = this.barDefaultWeights[2];\n        break;\n      }\n    }\n    \n    this.targetWeight = this.emptyBarWeight;\n  }\n\n  getTotalWeight() {\n    var totalWeight = this.emptyBarWeight\n\n    \n    if(this.barType === 1)\n    {\n      this.plates.forEach(function (weight) {\n        totalWeight += weight.value * (weight.quantity / 2)\n      })\n    } else {      \n      this.plates.forEach(function (weight) {\n        totalWeight += weight.value * weight.quantity\n      })\n    }\n    return totalWeight;\n  }\n\n  calculateRequiredPlates() {\n    switch(this.barType){\n      case 0: {\n        this.requiredWeights = this.calculateRequiredPlatesBarbell(this.plates, this.targetWeight, this.emptyBarWeight)\n        break;\n      }\n      case 1: {\n        this.requiredWeights = this.calculateRequiredPlatesDumbbells(this.plates, this.targetWeight, this.emptyBarWeight)\n        break;\n      }\n      case 2: {\n        this.requiredWeights = this.calculateRequiredPlatesLoadingPin(this.plates, this.targetWeight, this.emptyBarWeight)\n        break;\n      }\n    }\n    \n    return this.requiredWeights;\n  }  \n  \n  calculateRequiredPlatesBarbell(weights, targetWeight, barbellWeight) {\n    var requiredWeights = []\n\n    /* Subtract bar weight from desired weight. */\n    var requiredWeightPlateTotal = targetWeight - barbellWeight\n\n    /* Loop over weights to build up weight per side */\n    weights.sort((a, b) => (a.value < b.value) ? 1 : -1)\n\n    weights.forEach(weight => {\n      /* Round down single plates to make plate pairs */\n      if(weight.quantity % 2 != 0)\n      {\n        weight.quantity--;\n      }\n\n      /* Skip empty plate and plates that don't have any pairs */\n      if (weight.quantity === 0 || weight.quantity < 2) {\n        return;\n      }\n\n      var platePairs = weight.quantity / 2;\n\n      for (let i = 0; i < platePairs; i += 1) {\n        /* Check that 2 plates doesn't exceed requiredWeightPlateTotal */\n        if (weight.value * 2 <= requiredWeightPlateTotal) {\n          requiredWeights.push(weight);\n          requiredWeightPlateTotal -= (weight.value * 2);\n        }\n      }\n    })\n    return requiredWeights;\n  }\n\n  calculateRequiredPlatesDumbbells(weights, targetWeight, barbellWeight) {\n    var requiredWeights = []\n\n    /* Subtract bar weight from desired weight. */\n    var requiredWeightPlateTotal = targetWeight - barbellWeight\n\n    /* Loop over weights to build up weight per side */\n    weights.sort((a, b) => (a.value < b.value) ? 1 : -1)\n\n    weights.forEach(weight => {\n      /* Round down 1-3 plates to make plate quads */\n      if(weight.quantity % 4 != 0)\n      {\n        weight.quantity--;\n        if(weight.quantity % 4 != 0)\n        {\n          weight.quantity--;\n          if(weight.quantity % 4 != 0)\n          {\n            weight.quantity--;\n          }\n        }\n      }\n\n      /* Skip empty plate and plates that don't have any quads */\n      if (weight.quantity < 4) {\n        return;\n      }\n\n      var platePairs = weight.quantity / 4;\n      for (let i = 0; i < platePairs; i += 1) {\n        /* Check that 4 plates don't exceed requiredWeightPlateTotal */\n        if (weight.value * 2 <= requiredWeightPlateTotal) {\n          requiredWeights.push(weight);\n          requiredWeightPlateTotal -= (weight.value * 2);\n        }\n      }\n    })\n    return requiredWeights;\n  }\n\n  calculateRequiredPlatesLoadingPin(weights, targetWeight, barbellWeight) {\n    var requiredWeights = []\n\n    /* Subtract bar weight from desired weight. */\n    var requiredWeightPlateTotal = targetWeight - barbellWeight\n\n    /* Loop over weights to build up weight per side */\n    weights.sort((a, b) => (a.value < b.value) ? 1 : -1)\n\n    weights.forEach(weight => {\n      /* Skip empty plate */\n      if (weight.quantity === 0) {\n        return;\n      }\n\n      var platePairs = weight.quantity;\n\n      for (let i = 0; i < platePairs; i += 1) {\n        /* Check that 2 plates doesn't exceed requiredWeightPlateTotal */\n        if (weight.value <= requiredWeightPlateTotal) {\n          requiredWeights.push(weight);\n          requiredWeightPlateTotal -= weight.value;\n        }\n      }\n    })\n    return requiredWeights;\n  }\n\n  generateRequiredPlatesString() {\n      this.requiredWeights = this.calculateRequiredPlates();\n    return this.getRequiredPlatesString();\n  }\n\n  getRequiredPlatesString() { \n    this.calculateRequiredPlates();\n    var outputString = \"\";\n\n    switch(this.barType){\n      case 0: {\n        outputString = this.generateBarbellPlatesString();\n        break;\n      }\n      case 1: {\n        outputString = this.generateDumbbellPlatesString();\n        break;\n      }\n      case 2: {\n        outputString = this.generateLoadingPinPlatesString();\n        break;\n      }\n    }\n\n    return \"\";\n  }\n\n  getBarbellPlatesCount() { \n    var plateCount = [\n    { weight:  45, count: 0},\n    { weight:  35, count: 0},\n    { weight:  25, count: 0},\n    { weight:  10, count: 0},\n    { weight:   5, count: 0},\n    { weight: 2.5, count: 0},\n  ]\n\n  for (let i = 0; i <= this.requiredWeights.length - 1; i++) {\n    plateCount.forEach(plate => {\n      if(plate.weight === this.requiredWeights[i].value)\n      {\n        plate.count++;\n      }\n    })\n  }\n\n  plateCount.filter(plate => plate.count != 0);\n\n  return plateCount;\n\n  }\n\n  generateBarbellPlatesString(){\n    /* Return string of plates in order */\n    var outputString = \"\";\n    var plateCount = this.getBarbellPlatesCount();\n\n    plateCount.reverse().forEach(plate => {\n      if(plate.count > 0)\n      {\n        outputString = outputString + plate.weight + \"(x\" + plate.count + \") - \"\n      }\n    })\n\n    outputString = outputString + \" | Barbell \" + this.emptyBarWeight + \"lbs | \";\n\n    plateCount.reverse().forEach(plate => {\n      if(plate.count > 0)\n      {\n        outputString = outputString + \" - \" + plate.weight + \"(x\" + plate.count + \")\"\n      }\n    })\n\n    return outputString;\n  }\n\n  generateDumbbellPlatesString(){\n    return \"\";\n  }\n\n  generateLoadingPinPlatesString(){\n    return \"\";\n  }\n\n  getPlateColor(plate) {\n    return plate.plateColor;\n  }\n}\n","<div class=\"container\">\n    <div class=\"unit-container\">\n        <a class=\"bartype-button bartype-active\" routerLink=\"/metric\" routerLinkActive=\"active\">Imperial</a>\n    </div>\n\n    <div class=\"bartype-button-container\">\n        <h2>Bar Type:</h2>\n        <div class=\"bartype-button\" (click)=\"setBarType(0)\" [class.bartype-active]=\"barType === 0\">Barbell</div>\n        <div class=\"bartype-button\" (click)=\"setBarType(1)\" [class.bartype-active]=\"barType === 1\">Dumbbells</div>\n        <div class=\"bartype-button\" (click)=\"setBarType(2)\" [class.bartype-active]=\"barType === 2\">Loading Pin</div>\n    </div>\n    <h2>Plate Inventory:</h2>\n    <label for=\"barweight\">Empty Bar Weight: <input type=\"number\" id=\"barweight\" step=\"5\" min=\"0\" max=\"1000\" class=\"weight-input\" [(ngModel)]=\"emptyBarWeight\">lbs</label>\n    \n\n    <ul class=\"plate-inventory\">\n        <li>\n            <label for=\"fortyfive\">45lbs:  </label>\n            <input type=\"number\" id=\"fortyfive\" class=\"weight-input\" [(ngModel)]=\"plates[0].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"thirtyfive\">35lbs:  </label>\n            <input type=\"number\" id=\"thirtyfive\" class=\"weight-input\" [(ngModel)]=\"plates[1].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"twentyfive\">25lbs:  </label>\n            <input type=\"number\" id=\"twentyfive\" class=\"weight-input\" [(ngModel)]=\"plates[2].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"ten\">10lbs:  </label>\n            <input type=\"number\" id=\"ten\" class=\"weight-input\" [(ngModel)]=\"plates[3].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"five\">5lbs:   </label>\n            <input type=\"number\" id=\"five\" class=\"weight-input\" [(ngModel)]=\"plates[4].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"twoandahalf\">2.5lbs: </label>\n            <input type=\"number\" id=\"twoandahalf\" class=\"weight-input\" [(ngModel)]=\"plates[5].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>\n    </ul>\n\n    <h2>Target Weight:</h2>\n    <label for=\"target\">Desired Weight on Bar: <input type=\"number\" id=\"target-input\" name=\"target-input\" [(ngModel)]=\"targetWeight\" step=\"5\" min=\"{{ emptyBarWeight }}\" max=\"{{ getTotalWeight() }}\"/>lbs  </label>\n    <input type=\"range\" id=\"target\" class=\"slider\" name=\"target\" [(ngModel)]=\"targetWeight\" step=\"5\" min=\"{{ emptyBarWeight }}\" max=\"{{ getTotalWeight() }}\" required>\n\n    <h2>Weight Plate Output: {{ targetWeight }}lbs</h2>\n    \n    <app-diagram [barType]=\"barType\" \n                 [emptyBarWeight]=\"emptyBarWeight\" \n                 [requiredWeights]=\"requiredWeights\"></app-diagram>\n    <div class=\"centered plate-string\" >\n        <p>{{ getRequiredPlatesString() }}</p>\n    </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { INSPECT_MAX_BYTES } from 'buffer';\n\n@Component({\n  selector: 'app-diagram',\n  templateUrl: './diagram.component.html',\n  styleUrls: ['./diagram.component.scss']\n})\nexport class DiagramComponent implements OnInit {\n\n  @Input() barType: number;\n  @Input() emptyBarWeight: number;\n  @Input() requiredWeights: Array<number>;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  hasRequiredPlates(): boolean {\n    return this.requiredWeights.length > 0;\n  }\n\n}\n","<div>\n    <div class=\"barbell-graphic-container\" *ngIf=\"barType == 0\">\n        <div *ngIf=\"hasRequiredPlates()\" class=\"inline-block\">\n            <div *ngFor=\"let plate of requiredWeights.reverse()\" class=\"inline-block\">\n                <div class=\"weight-plate-graphic\"  [style.background-color]=\"plate.plateColor\">{{ plate.value }}</div>\n            </div>\n        </div>\n        <div class=\"barbell-container\">\n            <div class=\"barbell-graphic weight-plate-graphic\">{{ emptyBarWeight }}</div>\n        </div>\n        <div *ngIf=\"hasRequiredPlates()\" class=\"inline-block\">\n            <div *ngFor=\"let plate of requiredWeights.reverse()\" class=\"inline-block\">\n                <div class=\"weight-plate-graphic\"  [style.background-color]=\"plate.plateColor\">{{ plate.value }}</div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"barbell-graphic-container\"  *ngIf=\"barType == 1\">\n        <div *ngIf=\"hasRequiredPlates()\" class=\"inline-block\">\n            <div *ngFor=\"let plate of requiredWeights.reverse()\" class=\"inline-block\">\n                <div class=\"weight-plate-graphic\"  [style.background-color]=\"plate.plateColor\">{{ plate.value }}</div>\n            </div>\n        </div>\n        <div class=\"barbell-container\">\n            <div class=\"barbell-graphic weight-plate-graphic\">{{ emptyBarWeight }}</div>\n        </div>\n        <div *ngIf=\"hasRequiredPlates()\" class=\"inline-block\">\n            <div *ngFor=\"let plate of requiredWeights.reverse()\" class=\"inline-block\">\n                <div class=\"weight-plate-graphic\"  [style.background-color]=\"plate.plateColor\">{{ plate.value }}</div>\n            </div>\n        </div>\n        <br />\n        <br />\n        <div *ngIf=\"hasRequiredPlates()\" class=\"inline-block\">\n            <div *ngFor=\"let plate of requiredWeights.reverse()\" class=\"inline-block\">\n                <div class=\"weight-plate-graphic\"  [style.background-color]=\"plate.plateColor\">{{ plate.value }}</div>\n            </div>\n        </div>\n        <div class=\"barbell-container\">\n            <div class=\"barbell-graphic weight-plate-graphic\">{{ emptyBarWeight }}</div>\n        </div>\n        <div *ngIf=\"hasRequiredPlates()\" class=\"inline-block\">\n            <div *ngFor=\"let plate of requiredWeights.reverse()\" class=\"inline-block\">\n                <div class=\"weight-plate-graphic\"  [style.background-color]=\"plate.plateColor\">{{ plate.value }}</div>\n            </div>\n        </div>\n    </div>\n\n    <div *ngIf=\"barType == 2\"> \n        <div class=\"loading-pin-container\">\n            <div class=\"loading-pin-top\"></div>\n            <div *ngIf=\"hasRequiredPlates()\" class=\"loading-pin-container\">\n                <div *ngFor=\"let plate of requiredWeights.reverse()\" class=\"\">\n                    <div class=\"loading-pin-graphic\"  [style.background-color]=\"plate.plateColor\">{{ plate.value }}</div>\n                </div>\n            </div>\n            <div class=\"loading-pin-container\">\n                <div class=\"loading-pin-graphic loading-pin-bar\">{{ emptyBarWeight }}</div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-instagrambox',\n  templateUrl: './instagrambox.component.html',\n  styleUrls: ['./instagrambox.component.scss']\n})\nexport class InstagramboxComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\n\n@Component({\n  selector: 'app-metric-calculator',\n  templateUrl: './metric-calculator.component.html',\n  styleUrls: ['./metric-calculator.component.scss']\n})\nexport class MetricCalculatorComponent implements OnInit {\n  barDefaultWeights: Array<number> = [\n    20,\n    2.5,\n    5\n  ];\n  \n  barType: number = 0;\n  emptyBarWeight: number = 20;\n  targetWeight: number = 20;\n  barWidth: number = 25;\n  requiredWeights: Array<{ value: number, quantity: number, plateColor: string }> = [];\n  weightStep: number = 2;\n\n  defaultPlates: Array<{ value: number, quantity: number, plateColor: string}> = [\n    { value: 25, quantity: 10, plateColor: \"#FF9999\"},\n    { value: 20, quantity: 10, plateColor: \"#588dff\"},\n    { value: 15, quantity: 2, plateColor: \"#FFFF99\"},\n    { value: 10, quantity: 2, plateColor: \"#7FBF7F\"},\n    { value: 5, quantity: 4, plateColor: \"#FFF\"},\n    { value: 2.5, quantity: 2, plateColor: \"#FFC0CB\"}\n  ]\n\n  plates: Array<{ value: number, quantity: number, plateColor: string}> = this.defaultPlates;\n\n  constructor(private cdr: ChangeDetectorRef){}\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewChecked(): void {\n    this.cdr.detectChanges();\n  }\n\n  setBarType(barTypeId: number){\n    this.barType = barTypeId;\n    switch(barTypeId){\n      case 0: {\n        this.plates = Object.assign([], this.defaultPlates);\n        this.weightStep = 2;\n        this.emptyBarWeight = this.barDefaultWeights[0];\n        break;\n      }\n      case 1: {\n        this.emptyBarWeight = this.barDefaultWeights[1];\n        this.weightStep = 4;\n        this.plates = Object.assign([], [\n          { value: 25, quantity: 0, plateColor: \"#FF9999\"},\n          { value: 20, quantity: 0, plateColor: \"#588dff\"},\n          { value: 15, quantity: 4, plateColor: \"#FFFF99\"},\n          { value: 10, quantity: 8, plateColor: \"#7FBF7F\"},\n          { value: 5, quantity: 10, plateColor: \"#FFF\"},\n          { value: 2.5, quantity: 10, plateColor: \"#FFC0CB\"},\n        ]);\n        break;\n      }\n      case 2: {\n        this.plates = Object.assign([], this.defaultPlates);\n        this.weightStep = 1;\n        this.emptyBarWeight = this.barDefaultWeights[2];\n        break;\n      }\n    }\n    \n    this.targetWeight = this.emptyBarWeight;\n  }\n\n  getTotalWeight() {\n    var totalWeight = this.emptyBarWeight\n\n    if(this.barType === 1)\n    {\n      this.plates.forEach(function (weight) {\n        totalWeight += weight.value * (weight.quantity / 2)\n      })\n    } else {      \n      this.plates.forEach(function (weight) {\n        totalWeight += weight.value * weight.quantity\n      })\n    }\n    \n    return totalWeight\n  }\n\n  calculateRequiredPlates() {\n    switch(this.barType){\n      case 0: {\n        this.requiredWeights = this.calculateRequiredPlatesBarbell(this.plates, this.targetWeight, this.emptyBarWeight)\n        break;\n      }\n      case 1: {\n        this.requiredWeights = this.calculateRequiredPlatesDumbbells(this.plates, this.targetWeight, this.emptyBarWeight)\n        break;\n      }\n      case 2: {\n        this.requiredWeights = this.calculateRequiredPlatesLoadingPin(this.plates, this.targetWeight, this.emptyBarWeight)\n        break;\n      }\n    }\n    \n    return this.requiredWeights;\n  }  \n  \n  calculateRequiredPlatesBarbell(weights, targetWeight, barbellWeight) {\n    var requiredWeights = []\n\n    /* Subtract bar weight from desired weight. */\n    var requiredWeightPlateTotal = targetWeight - barbellWeight\n\n    /* Loop over weights to build up weight per side */\n    weights.sort((a, b) => (a.value < b.value) ? 1 : -1)\n\n    weights.forEach(weight => {\n      /* Round down single plates to make plate pairs */\n      if(weight.quantity % 2 != 0)\n      {\n        weight.quantity--;\n      }\n\n      /* Skip empty plate and plates that don't have any pairs */\n      if (weight.quantity < 2) {\n        return;\n      }\n\n      var platePairs = weight.quantity / 2;\n      for (let i = 0; i < platePairs; i += 1) {\n        /* Check that 4 plates don't exceed requiredWeightPlateTotal */\n        if (weight.value * 2 <= requiredWeightPlateTotal) {\n          requiredWeights.push(weight);\n          requiredWeightPlateTotal -= (weight.value * 2);\n        }\n      }\n    })\n    return requiredWeights;\n  }\n\n  calculateRequiredPlatesDumbbells(weights, targetWeight, barbellWeight) {\n    var requiredWeights = []\n\n    /* Subtract bar weight from desired weight. */\n    var requiredWeightPlateTotal = targetWeight - barbellWeight\n\n    /* Loop over weights to build up weight per side */\n    weights.sort((a, b) => (a.value < b.value) ? 1 : -1)\n\n    weights.forEach(weight => {\n      /* Round down 1-3 plates to make plate quads */\n      if(weight.quantity % 4 != 0)\n      {\n        weight.quantity--;\n        if(weight.quantity % 4 != 0)\n        {\n          weight.quantity--;\n          if(weight.quantity % 4 != 0)\n          {\n            weight.quantity--;\n          }\n        }\n      }\n\n      /* Skip empty plate and plates that don't have any pairs */\n      if (weight.quantity < 4) {\n        return;\n      }\n\n      var platePairs = weight.quantity / 4;\n\n      for (let i = 0; i < platePairs; i += 1) {\n        /* Check that 2 plates doesn't exceed requiredWeightPlateTotal */\n        if (weight.value * 2 <= requiredWeightPlateTotal) {\n          requiredWeights.push(weight);\n          requiredWeightPlateTotal -= (weight.value * 2);\n        }\n      }\n    })\n    return requiredWeights;\n  }\n\n  calculateRequiredPlatesLoadingPin(weights, targetWeight, barbellWeight) {\n    var requiredWeights = []\n\n    /* Subtract bar weight from desired weight. */\n    var requiredWeightPlateTotal = targetWeight - barbellWeight\n\n    /* Loop over weights to build up weight per side */\n    weights.sort((a, b) => (a.value < b.value) ? 1 : -1)\n\n    weights.forEach(weight => {\n      /* Skip empty plate */\n      if (weight.quantity === 0) {\n        return;\n      }\n\n      var platePairs = weight.quantity;\n\n      for (let i = 0; i < platePairs; i += 1) {\n        /* Check that 2 plates doesn't exceed requiredWeightPlateTotal */\n        if (weight.value <= requiredWeightPlateTotal) {\n          requiredWeights.push(weight);\n          requiredWeightPlateTotal -= weight.value;\n        }\n      }\n    })\n    return requiredWeights;\n  }\n\n  generateRequiredPlatesString() {\n      this.requiredWeights = this.calculateRequiredPlates();\n    return this.getRequiredPlatesString();\n  }\n\n  getRequiredPlatesString() { \n    this.calculateRequiredPlates();\n    var outputString = \"\";\n\n    switch(this.barType){\n      case 0: {\n        outputString = this.generateBarbellPlatesString();\n        break;\n      }\n      case 1: {\n        outputString = this.generateDumbbellPlatesString();\n        break;\n      }\n      case 2: {\n        outputString = this.generateLoadingPinPlatesString();\n        break;\n      }\n    }\n\n    return \"\";\n  }\n\n  getBarbellPlatesCount() { \n    var plateCount = [\n    { weight:  45, count: 0},\n    { weight:  35, count: 0},\n    { weight:  25, count: 0},\n    { weight:  10, count: 0},\n    { weight:   5, count: 0},\n    { weight: 2.5, count: 0},\n  ]\n\n  for (let i = 0; i <= this.requiredWeights.length - 1; i++) {\n    plateCount.forEach(plate => {\n      if(plate.weight === this.requiredWeights[i].value)\n      {\n        plate.count++;\n      }\n    })\n  }\n\n  plateCount.filter(plate => plate.count != 0);\n\n  return plateCount;\n\n  }\n\n  generateBarbellPlatesString(){\n    /* Return string of plates in order */\n    var outputString = \"\";\n    var plateCount = this.getBarbellPlatesCount();\n\n    plateCount.reverse().forEach(plate => {\n      if(plate.count > 0)\n      {\n        outputString = outputString + plate.weight + \"(x\" + plate.count + \") - \"\n      }\n    })\n\n    outputString = outputString + \" | Barbell \" + this.emptyBarWeight + \"kg | \";\n\n    plateCount.reverse().forEach(plate => {\n      if(plate.count > 0)\n      {\n        outputString = outputString + \" - \" + plate.weight + \"(x\" + plate.count + \")\"\n      }\n    })\n\n    return outputString;\n  }\n\n  generateDumbbellPlatesString(){\n    return \"\";\n  }\n\n  generateLoadingPinPlatesString(){\n    return \"\";\n  }\n\n  getPlateColor(plate) {\n    return plate.plateColor;\n  }\n}\n","<div class=\"container\">\n    <div class=\"unit-container\">\n        <a class=\"bartype-button bartype-active\" routerLink=\"/\" routerLinkActive=\"active\">Metric</a>\n    </div>\n\n    <div class=\"bartype-button-container\">\n        <h2>Bar Type:</h2>\n        <div class=\"bartype-button\" (click)=\"setBarType(0)\" [class.bartype-active]=\"barType === 0\">Barbell</div>\n        <div class=\"bartype-button\" (click)=\"setBarType(1)\" [class.bartype-active]=\"barType === 1\">Dumbbells</div>\n        <div class=\"bartype-button\" (click)=\"setBarType(2)\" [class.bartype-active]=\"barType === 2\">Loading Pin</div>\n    </div>\n    <h2>Plate Inventory:</h2>\n    <label for=\"barweight\">Empty Bar Weight: <input type=\"number\" id=\"barweight\" step=\"5\" min=\"0\" max=\"1000\" class=\"weight-input\" [(ngModel)]=\"emptyBarWeight\">kgs</label>\n    \n\n    <ul class=\"plate-inventory\">\n        <li>\n            <label for=\"fortyfive\">25kgs:  </label>\n            <input type=\"number\" id=\"fortyfive\" class=\"weight-input\" [(ngModel)]=\"plates[0].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"thirtyfive\">20kgs:  </label>\n            <input type=\"number\" id=\"thirtyfive\" class=\"weight-input\" [(ngModel)]=\"plates[1].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"twentyfive\">15kgs:  </label>\n            <input type=\"number\" id=\"twentyfive\" class=\"weight-input\" [(ngModel)]=\"plates[2].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"ten\">10kgs:  </label>\n            <input type=\"number\" id=\"ten\" class=\"weight-input\" [(ngModel)]=\"plates[3].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"five\">5kgs:   </label>\n            <input type=\"number\" id=\"five\" class=\"weight-input\" [(ngModel)]=\"plates[4].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"twoandahalf\">2.5kgs: </label>\n            <input type=\"number\" id=\"twoandahalf\" class=\"weight-input\" [(ngModel)]=\"plates[5].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>\n    </ul>\n\n    <h2>Target Weight:</h2>\n    <label for=\"target\">Desired Weight on Bar: <input type=\"number\" id=\"target-input\" name=\"target-input\" [(ngModel)]=\"targetWeight\" step=\"5\" min=\"{{ emptyBarWeight }}\" max=\"{{ getTotalWeight() }}\"/>kgs  </label>\n    <input type=\"range\" id=\"target\" class=\"slider\" name=\"target\" [(ngModel)]=\"targetWeight\" step=\"5\" min=\"{{ emptyBarWeight }}\" max=\"{{ getTotalWeight() }}\" required>\n\n    <h2>Weight Plate Output: {{ targetWeight }}kgs</h2>\n    \n    <app-diagram [barType]=\"barType\" \n                 [emptyBarWeight]=\"emptyBarWeight\" \n                 [requiredWeights]=\"requiredWeights\"></app-diagram>\n    <div class=\"centered plate-string\" >\n        <p>{{ getRequiredPlatesString() }}</p>\n    </div>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: true\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}