{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/calculator/calculator.component.ts","./src/app/calculator/calculator.component.html","./src/app/calculator/diagram/diagram.component.ts","./src/app/calculator/diagram/diagram.component.html","./src/app/instagrambox/instagrambox.component.ts","./src/app/metric-calculator/metric-calculator.component.ts","./src/app/metric-calculator/metric-calculator.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CalculatorComponent } from './calculator/calculator.component';\nimport { MetricCalculatorComponent } from './metric-calculator/metric-calculator.component';\n\nconst routes: Routes = [\n  { path: '', component: CalculatorComponent },\n  { path: 'metric', component: MetricCalculatorComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'plate-math';\n}\n","<header>\n  <nav>\n    <h1>Plate Math is Hard</h1>\n  </nav>\n</header>\n\n<div class=\"container\">\n  <router-outlet></router-outlet>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CalculatorComponent } from './calculator/calculator.component';\nimport { DiagramComponent } from './calculator/diagram/diagram.component';\nimport { InstagramboxComponent } from './instagrambox/instagrambox.component';\nimport { MetricCalculatorComponent } from './metric-calculator/metric-calculator.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CalculatorComponent,\n    DiagramComponent,\n    InstagramboxComponent,\n    MetricCalculatorComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-calculator',\n  templateUrl: './calculator.component.html',\n  styleUrls: ['./calculator.component.scss']\n})\nexport class CalculatorComponent implements OnInit {\n  barDefaultWeights: Array<number> = [\n    45,\n    5,\n    10\n  ];\n  \n  barType: number = 0;\n  emptyBarWeight: number = 45;\n  targetWeight: number = 45;\n  barWidth: number = 25;\n  requiredWeights: Array<{ value: number, quantity: number, plateColor: string }> = [];\n  weightStep: number = 2;\n\n  defaultPlates: Array<{ value: number, quantity: number, plateColor: string}> = [\n    { value: 45, quantity: 10, plateColor: \"#588dff\"},\n    { value: 35, quantity: 2, plateColor: \"#FFFF99\"},\n    { value: 25, quantity: 2, plateColor: \"#7FBF7F\"},\n    { value: 10, quantity: 4, plateColor: \"#FFF\"},\n    { value: 5, quantity: 2, plateColor: \"#FF9999\"},\n    { value: 2.5, quantity: 2, plateColor: \"#e94985\"},\n  ]\n\n  plates: Array<{ value: number, quantity: number, plateColor: string}> = this.defaultPlates;\n\n  constructor(private cdr: ChangeDetectorRef){}\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewChecked(): void {\n    this.cdr.detectChanges();\n  }\n\n  setBarType(barTypeId: number){\n    this.barType = barTypeId;\n    switch(barTypeId){\n      case 0: {\n        this.plates = Object.assign([], this.defaultPlates);\n        this.weightStep = 2;\n        this.emptyBarWeight = this.barDefaultWeights[0];\n        break;\n      }\n      case 1: {\n        this.emptyBarWeight = this.barDefaultWeights[1];\n        this.weightStep = 4;\n        this.plates = Object.assign([], [\n          { value: 45, quantity: 0, plateColor: \"#588dff\"},\n          { value: 35, quantity: 0, plateColor: \"#FFFF99\"},\n          { value: 25, quantity: 4, plateColor: \"#7FBF7F\"},\n          { value: 10, quantity: 8, plateColor: \"#FFF\"},\n          { value: 5, quantity: 10, plateColor: \"#FF9999\"},\n          { value: 2.5, quantity: 10, plateColor: \"#e94985\"},\n        ]);\n        break;\n      }\n      case 2: {\n        this.plates = Object.assign([], this.defaultPlates);\n        this.weightStep = 1;\n        this.emptyBarWeight = this.barDefaultWeights[2];\n        break;\n      }\n    }\n    \n    this.targetWeight = this.emptyBarWeight;\n  }\n\n  getTotalWeight() {\n    var totalWeight = this.emptyBarWeight\n\n    \n    if(this.barType === 1)\n    {\n      this.plates.forEach(function (weight) {\n        totalWeight += weight.value * (weight.quantity / 2)\n      })\n    } else {      \n      this.plates.forEach(function (weight) {\n        totalWeight += weight.value * weight.quantity\n      })\n    }\n    return totalWeight;\n  }\n\n  calculateRequiredPlates() {\n    switch(this.barType){\n      case 0: {\n        this.requiredWeights = this.calculateRequiredPlatesBarbell(this.plates, this.targetWeight, this.emptyBarWeight)\n        break;\n      }\n      case 1: {\n        this.requiredWeights = this.calculateRequiredPlatesDumbbells(this.plates, this.targetWeight, this.emptyBarWeight)\n        break;\n      }\n      case 2: {\n        this.requiredWeights = this.calculateRequiredPlatesLoadingPin(this.plates, this.targetWeight, this.emptyBarWeight)\n        break;\n      }\n    }\n    \n    return this.requiredWeights;\n  }  \n  \n  calculateRequiredPlatesBarbell(weights, targetWeight, barbellWeight) {\n    var requiredWeights = []\n\n    /* Subtract bar weight from desired weight. */\n    var requiredWeightPlateTotal = targetWeight - barbellWeight\n\n    /* Loop over weights to build up weight per side */\n    weights.sort((a, b) => (a.value < b.value) ? 1 : -1)\n\n    weights.forEach(weight => {\n      /* Round down single plates to make plate pairs */\n      if(weight.quantity % 2 != 0)\n      {\n        weight.quantity--;\n      }\n\n      /* Skip empty plate and plates that don't have any pairs */\n      if (weight.quantity === 0 || weight.quantity < 2) {\n        return;\n      }\n\n      var platePairs = weight.quantity / 2;\n\n      for (let i = 0; i < platePairs; i += 1) {\n        /* Check that 2 plates doesn't exceed requiredWeightPlateTotal */\n        if (weight.value * 2 <= requiredWeightPlateTotal) {\n          requiredWeights.push(weight);\n          requiredWeightPlateTotal -= (weight.value * 2);\n        }\n      }\n    })\n    return requiredWeights;\n  }\n\n  calculateRequiredPlatesDumbbells(weights, targetWeight, barbellWeight) {\n    var requiredWeights = []\n\n    /* Subtract bar weight from desired weight. */\n    var requiredWeightPlateTotal = targetWeight - barbellWeight\n\n    /* Loop over weights to build up weight per side */\n    weights.sort((a, b) => (a.value < b.value) ? 1 : -1)\n\n    weights.forEach(weight => {\n      /* Round down 1-3 plates to make plate quads */\n      if(weight.quantity % 4 != 0)\n      {\n        weight.quantity--;\n        if(weight.quantity % 4 != 0)\n        {\n          weight.quantity--;\n          if(weight.quantity % 4 != 0)\n          {\n            weight.quantity--;\n          }\n        }\n      }\n\n      /* Skip empty plate and plates that don't have any quads */\n      if (weight.quantity < 4) {\n        return;\n      }\n\n      var platePairs = weight.quantity / 4;\n      for (let i = 0; i < platePairs; i += 1) {\n        /* Check that 4 plates don't exceed requiredWeightPlateTotal */\n        if (weight.value * 2 <= requiredWeightPlateTotal) {\n          requiredWeights.push(weight);\n          requiredWeightPlateTotal -= (weight.value * 2);\n        }\n      }\n    })\n    return requiredWeights;\n  }\n\n  calculateRequiredPlatesLoadingPin(weights, targetWeight, barbellWeight) {\n    var requiredWeights = []\n\n    /* Subtract bar weight from desired weight. */\n    var requiredWeightPlateTotal = targetWeight - barbellWeight\n\n    /* Loop over weights to build up weight per side */\n    weights.sort((a, b) => (a.value < b.value) ? 1 : -1)\n\n    weights.forEach(weight => {\n      /* Skip empty plate */\n      if (weight.quantity === 0) {\n        return;\n      }\n\n      var platePairs = weight.quantity;\n\n      for (let i = 0; i < platePairs; i += 1) {\n        /* Check that 2 plates doesn't exceed requiredWeightPlateTotal */\n        if (weight.value <= requiredWeightPlateTotal) {\n          requiredWeights.push(weight);\n          requiredWeightPlateTotal -= weight.value;\n        }\n      }\n    })\n    return requiredWeights;\n  }\n\n  generateRequiredPlatesString() {\n      this.requiredWeights = this.calculateRequiredPlates();\n    return this.getRequiredPlatesString();\n  }\n\n  getRequiredPlatesString() { \n    this.calculateRequiredPlates();\n    var outputString = \"\";\n\n    switch(this.barType){\n      case 0: {\n        outputString = this.generateBarbellPlatesString();\n        break;\n      }\n      case 1: {\n        outputString = this.generateDumbbellPlatesString();\n        break;\n      }\n      case 2: {\n        outputString = this.generateLoadingPinPlatesString();\n        break;\n      }\n    }\n\n    return \"\";\n  }\n\n  getBarbellPlatesCount() { \n    var plateCount = [\n    { weight:  45, count: 0},\n    { weight:  35, count: 0},\n    { weight:  25, count: 0},\n    { weight:  10, count: 0},\n    { weight:   5, count: 0},\n    { weight: 2.5, count: 0},\n  ]\n\n  for (let i = 0; i <= this.requiredWeights.length - 1; i++) {\n    plateCount.forEach(plate => {\n      if(plate.weight === this.requiredWeights[i].value)\n      {\n        plate.count++;\n      }\n    })\n  }\n\n  plateCount.filter(plate => plate.count != 0);\n\n  return plateCount;\n\n  }\n\n  generateBarbellPlatesString(){\n    /* Return string of plates in order */\n    var outputString = \"\";\n    var plateCount = this.getBarbellPlatesCount();\n\n    plateCount.reverse().forEach(plate => {\n      if(plate.count > 0)\n      {\n        outputString = outputString + plate.weight + \"(x\" + plate.count + \") - \"\n      }\n    })\n\n    outputString = outputString + \" | Barbell \" + this.emptyBarWeight + \"lbs | \";\n\n    plateCount.reverse().forEach(plate => {\n      if(plate.count > 0)\n      {\n        outputString = outputString + \" - \" + plate.weight + \"(x\" + plate.count + \")\"\n      }\n    })\n\n    return outputString;\n  }\n\n  generateDumbbellPlatesString(){\n    return \"\";\n  }\n\n  generateLoadingPinPlatesString(){\n    return \"\";\n  }\n\n  getPlateColor(plate) {\n    return plate.plateColor;\n  }\n}\n","<div class=\"container\">\n    <div class=\"unit-container\">\n        <a class=\"bartype-button bartype-active\" routerLink=\"/metric\" routerLinkActive=\"active\">Imperial</a>\n    </div>\n\n    <div class=\"bartype-button-container\">\n        <h2>Bar Type:</h2>\n        <div class=\"bartype-button\" (click)=\"setBarType(0)\" [class.bartype-active]=\"barType === 0\">Barbell</div>\n        <div class=\"bartype-button\" (click)=\"setBarType(1)\" [class.bartype-active]=\"barType === 1\">Dumbbells</div>\n        <div class=\"bartype-button\" (click)=\"setBarType(2)\" [class.bartype-active]=\"barType === 2\">Loading Pin</div>\n    </div>\n    <h2>Plate Inventory:</h2>\n    <label for=\"barweight\">Empty Bar Weight: <input type=\"number\" id=\"barweight\" step=\"5\" min=\"0\" max=\"1000\" class=\"weight-input\" [(ngModel)]=\"emptyBarWeight\">lbs</label>\n    \n\n    <ul class=\"plate-inventory\">\n        <li>\n            <label for=\"fortyfive\">45lbs:  </label>\n            <input type=\"number\" id=\"fortyfive\" class=\"weight-input\" [(ngModel)]=\"plates[0].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"thirtyfive\">35lbs:  </label>\n            <input type=\"number\" id=\"thirtyfive\" class=\"weight-input\" [(ngModel)]=\"plates[1].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"twentyfive\">25lbs:  </label>\n            <input type=\"number\" id=\"twentyfive\" class=\"weight-input\" [(ngModel)]=\"plates[2].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"ten\">10lbs:  </label>\n            <input type=\"number\" id=\"ten\" class=\"weight-input\" [(ngModel)]=\"plates[3].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"five\">5lbs:   </label>\n            <input type=\"number\" id=\"five\" class=\"weight-input\" [(ngModel)]=\"plates[4].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"twoandahalf\">2.5lbs: </label>\n            <input type=\"number\" id=\"twoandahalf\" class=\"weight-input\" [(ngModel)]=\"plates[5].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>\n    </ul>\n\n    <h2>Target Weight:</h2>\n    <label for=\"target\">Desired Weight on Bar: <input type=\"number\" id=\"target-input\" name=\"target-input\" [(ngModel)]=\"targetWeight\" step=\"5\" min=\"{{ emptyBarWeight }}\" max=\"{{ getTotalWeight() }}\"/>lbs  </label>\n    <input type=\"range\" id=\"target\" class=\"slider\" name=\"target\" [(ngModel)]=\"targetWeight\" step=\"5\" min=\"{{ emptyBarWeight }}\" max=\"{{ getTotalWeight() }}\" required>\n\n    <h2>Weight Plate Output: {{ targetWeight }}lbs</h2>\n    \n    <app-diagram [barType]=\"barType\" \n                 [emptyBarWeight]=\"emptyBarWeight\" \n                 [requiredWeights]=\"requiredWeights\"></app-diagram>\n    <div class=\"centered plate-string\" >\n        <p>{{ getRequiredPlatesString() }}</p>\n    </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { INSPECT_MAX_BYTES } from 'buffer';\n\n@Component({\n  selector: 'app-diagram',\n  templateUrl: './diagram.component.html',\n  styleUrls: ['./diagram.component.scss']\n})\nexport class DiagramComponent implements OnInit {\n\n  @Input() barType: number;\n  @Input() emptyBarWeight: number;\n  @Input() requiredWeights: Array<number>;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  hasRequiredPlates(): boolean {\n    return this.requiredWeights.length > 0;\n  }\n\n}\n","<div>\n    <div class=\"barbell-graphic-container\" *ngIf=\"barType == 0\">\n        <div *ngIf=\"hasRequiredPlates()\" class=\"inline-block\">\n            <div *ngFor=\"let plate of requiredWeights.reverse()\" class=\"inline-block\">\n                <div class=\"weight-plate-graphic\"  [style.background-color]=\"plate.plateColor\">{{ plate.value }}</div>\n            </div>\n        </div>\n        <div class=\"barbell-container\">\n            <div class=\"barbell-graphic weight-plate-graphic\">{{ emptyBarWeight }}</div>\n        </div>\n        <div *ngIf=\"hasRequiredPlates()\" class=\"inline-block\">\n            <div *ngFor=\"let plate of requiredWeights.reverse()\" class=\"inline-block\">\n                <div class=\"weight-plate-graphic\"  [style.background-color]=\"plate.plateColor\">{{ plate.value }}</div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"barbell-graphic-container\"  *ngIf=\"barType == 1\">\n        <div *ngIf=\"hasRequiredPlates()\" class=\"inline-block\">\n            <div *ngFor=\"let plate of requiredWeights.reverse()\" class=\"inline-block\">\n                <div class=\"weight-plate-graphic\"  [style.background-color]=\"plate.plateColor\">{{ plate.value }}</div>\n            </div>\n        </div>\n        <div class=\"barbell-container\">\n            <div class=\"barbell-graphic weight-plate-graphic\">{{ emptyBarWeight }}</div>\n        </div>\n        <div *ngIf=\"hasRequiredPlates()\" class=\"inline-block\">\n            <div *ngFor=\"let plate of requiredWeights.reverse()\" class=\"inline-block\">\n                <div class=\"weight-plate-graphic\"  [style.background-color]=\"plate.plateColor\">{{ plate.value }}</div>\n            </div>\n        </div>\n        <br />\n        <br />\n        <div *ngIf=\"hasRequiredPlates()\" class=\"inline-block\">\n            <div *ngFor=\"let plate of requiredWeights.reverse()\" class=\"inline-block\">\n                <div class=\"weight-plate-graphic\"  [style.background-color]=\"plate.plateColor\">{{ plate.value }}</div>\n            </div>\n        </div>\n        <div class=\"barbell-container\">\n            <div class=\"barbell-graphic weight-plate-graphic\">{{ emptyBarWeight }}</div>\n        </div>\n        <div *ngIf=\"hasRequiredPlates()\" class=\"inline-block\">\n            <div *ngFor=\"let plate of requiredWeights.reverse()\" class=\"inline-block\">\n                <div class=\"weight-plate-graphic\"  [style.background-color]=\"plate.plateColor\">{{ plate.value }}</div>\n            </div>\n        </div>\n    </div>\n\n    <div *ngIf=\"barType == 2\"> \n        <div class=\"loading-pin-container\">\n            <div class=\"loading-pin-top\"></div>\n            <div *ngIf=\"hasRequiredPlates()\" class=\"loading-pin-container\">\n                <div *ngFor=\"let plate of requiredWeights.reverse()\" class=\"\">\n                    <div class=\"loading-pin-graphic\"  [style.background-color]=\"plate.plateColor\">{{ plate.value }}</div>\n                </div>\n            </div>\n            <div class=\"loading-pin-container\">\n                <div class=\"loading-pin-graphic loading-pin-bar\">{{ emptyBarWeight }}</div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-instagrambox',\n  templateUrl: './instagrambox.component.html',\n  styleUrls: ['./instagrambox.component.scss']\n})\nexport class InstagramboxComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\n\n@Component({\n  selector: 'app-metric-calculator',\n  templateUrl: './metric-calculator.component.html',\n  styleUrls: ['./metric-calculator.component.scss']\n})\nexport class MetricCalculatorComponent implements OnInit {\n  barDefaultWeights: Array<number> = [\n    20,\n    2.5,\n    5\n  ];\n  \n  barType: number = 0;\n  emptyBarWeight: number = 20;\n  targetWeight: number = 20;\n  barWidth: number = 25;\n  requiredWeights: Array<{ value: number, quantity: number, plateColor: string }> = [];\n  weightStep: number = 2;\n\n  defaultPlates: Array<{ value: number, quantity: number, plateColor: string}> = [\n    { value: 25, quantity: 10, plateColor: \"#FF9999\"},\n    { value: 20, quantity: 10, plateColor: \"#588dff\"},\n    { value: 15, quantity: 2, plateColor: \"#FFFF99\"},\n    { value: 10, quantity: 2, plateColor: \"#7FBF7F\"},\n    { value: 5, quantity: 4, plateColor: \"#FFF\"},\n    { value: 2.5, quantity: 2, plateColor: \"#FFC0CB\"}\n  ]\n\n  plates: Array<{ value: number, quantity: number, plateColor: string}> = this.defaultPlates;\n\n  constructor(private cdr: ChangeDetectorRef){}\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewChecked(): void {\n    this.cdr.detectChanges();\n  }\n\n  setBarType(barTypeId: number){\n    this.barType = barTypeId;\n    switch(barTypeId){\n      case 0: {\n        this.plates = Object.assign([], this.defaultPlates);\n        this.weightStep = 2;\n        this.emptyBarWeight = this.barDefaultWeights[0];\n        break;\n      }\n      case 1: {\n        this.emptyBarWeight = this.barDefaultWeights[1];\n        this.weightStep = 4;\n        this.plates = Object.assign([], [\n          { value: 25, quantity: 0, plateColor: \"#FF9999\"},\n          { value: 20, quantity: 0, plateColor: \"#588dff\"},\n          { value: 15, quantity: 4, plateColor: \"#FFFF99\"},\n          { value: 10, quantity: 8, plateColor: \"#7FBF7F\"},\n          { value: 5, quantity: 10, plateColor: \"#FFF\"},\n          { value: 2.5, quantity: 10, plateColor: \"#FFC0CB\"},\n        ]);\n        break;\n      }\n      case 2: {\n        this.plates = Object.assign([], this.defaultPlates);\n        this.weightStep = 1;\n        this.emptyBarWeight = this.barDefaultWeights[2];\n        break;\n      }\n    }\n    \n    this.targetWeight = this.emptyBarWeight;\n  }\n\n  getTotalWeight() {\n    var totalWeight = this.emptyBarWeight\n\n    if(this.barType === 1)\n    {\n      this.plates.forEach(function (weight) {\n        totalWeight += weight.value * (weight.quantity / 2)\n      })\n    } else {      \n      this.plates.forEach(function (weight) {\n        totalWeight += weight.value * weight.quantity\n      })\n    }\n    \n    return totalWeight\n  }\n\n  calculateRequiredPlates() {\n    switch(this.barType){\n      case 0: {\n        this.requiredWeights = this.calculateRequiredPlatesBarbell(this.plates, this.targetWeight, this.emptyBarWeight)\n        break;\n      }\n      case 1: {\n        this.requiredWeights = this.calculateRequiredPlatesDumbbells(this.plates, this.targetWeight, this.emptyBarWeight)\n        break;\n      }\n      case 2: {\n        this.requiredWeights = this.calculateRequiredPlatesLoadingPin(this.plates, this.targetWeight, this.emptyBarWeight)\n        break;\n      }\n    }\n    \n    return this.requiredWeights;\n  }  \n  \n  calculateRequiredPlatesBarbell(weights, targetWeight, barbellWeight) {\n    var requiredWeights = []\n\n    /* Subtract bar weight from desired weight. */\n    var requiredWeightPlateTotal = targetWeight - barbellWeight\n\n    /* Loop over weights to build up weight per side */\n    weights.sort((a, b) => (a.value < b.value) ? 1 : -1)\n\n    weights.forEach(weight => {\n      /* Round down single plates to make plate pairs */\n      if(weight.quantity % 2 != 0)\n      {\n        weight.quantity--;\n      }\n\n      /* Skip empty plate and plates that don't have any pairs */\n      if (weight.quantity < 2) {\n        return;\n      }\n\n      var platePairs = weight.quantity / 2;\n      for (let i = 0; i < platePairs; i += 1) {\n        /* Check that 4 plates don't exceed requiredWeightPlateTotal */\n        if (weight.value * 2 <= requiredWeightPlateTotal) {\n          requiredWeights.push(weight);\n          requiredWeightPlateTotal -= (weight.value * 2);\n        }\n      }\n    })\n    return requiredWeights;\n  }\n\n  calculateRequiredPlatesDumbbells(weights, targetWeight, barbellWeight) {\n    var requiredWeights = []\n\n    /* Subtract bar weight from desired weight. */\n    var requiredWeightPlateTotal = targetWeight - barbellWeight\n\n    /* Loop over weights to build up weight per side */\n    weights.sort((a, b) => (a.value < b.value) ? 1 : -1)\n\n    weights.forEach(weight => {\n      /* Round down 1-3 plates to make plate quads */\n      if(weight.quantity % 4 != 0)\n      {\n        weight.quantity--;\n        if(weight.quantity % 4 != 0)\n        {\n          weight.quantity--;\n          if(weight.quantity % 4 != 0)\n          {\n            weight.quantity--;\n          }\n        }\n      }\n\n      /* Skip empty plate and plates that don't have any pairs */\n      if (weight.quantity < 4) {\n        return;\n      }\n\n      var platePairs = weight.quantity / 4;\n\n      for (let i = 0; i < platePairs; i += 1) {\n        /* Check that 2 plates doesn't exceed requiredWeightPlateTotal */\n        if (weight.value * 2 <= requiredWeightPlateTotal) {\n          requiredWeights.push(weight);\n          requiredWeightPlateTotal -= (weight.value * 2);\n        }\n      }\n    })\n    return requiredWeights;\n  }\n\n  calculateRequiredPlatesLoadingPin(weights, targetWeight, barbellWeight) {\n    var requiredWeights = []\n\n    /* Subtract bar weight from desired weight. */\n    var requiredWeightPlateTotal = targetWeight - barbellWeight\n\n    /* Loop over weights to build up weight per side */\n    weights.sort((a, b) => (a.value < b.value) ? 1 : -1)\n\n    weights.forEach(weight => {\n      /* Skip empty plate */\n      if (weight.quantity === 0) {\n        return;\n      }\n\n      var platePairs = weight.quantity;\n\n      for (let i = 0; i < platePairs; i += 1) {\n        /* Check that 2 plates doesn't exceed requiredWeightPlateTotal */\n        if (weight.value <= requiredWeightPlateTotal) {\n          requiredWeights.push(weight);\n          requiredWeightPlateTotal -= weight.value;\n        }\n      }\n    })\n    return requiredWeights;\n  }\n\n  generateRequiredPlatesString() {\n      this.requiredWeights = this.calculateRequiredPlates();\n    return this.getRequiredPlatesString();\n  }\n\n  getRequiredPlatesString() { \n    this.calculateRequiredPlates();\n    var outputString = \"\";\n\n    switch(this.barType){\n      case 0: {\n        outputString = this.generateBarbellPlatesString();\n        break;\n      }\n      case 1: {\n        outputString = this.generateDumbbellPlatesString();\n        break;\n      }\n      case 2: {\n        outputString = this.generateLoadingPinPlatesString();\n        break;\n      }\n    }\n\n    return \"\";\n  }\n\n  getBarbellPlatesCount() { \n    var plateCount = [\n    { weight:  45, count: 0},\n    { weight:  35, count: 0},\n    { weight:  25, count: 0},\n    { weight:  10, count: 0},\n    { weight:   5, count: 0},\n    { weight: 2.5, count: 0},\n  ]\n\n  for (let i = 0; i <= this.requiredWeights.length - 1; i++) {\n    plateCount.forEach(plate => {\n      if(plate.weight === this.requiredWeights[i].value)\n      {\n        plate.count++;\n      }\n    })\n  }\n\n  plateCount.filter(plate => plate.count != 0);\n\n  return plateCount;\n\n  }\n\n  generateBarbellPlatesString(){\n    /* Return string of plates in order */\n    var outputString = \"\";\n    var plateCount = this.getBarbellPlatesCount();\n\n    plateCount.reverse().forEach(plate => {\n      if(plate.count > 0)\n      {\n        outputString = outputString + plate.weight + \"(x\" + plate.count + \") - \"\n      }\n    })\n\n    outputString = outputString + \" | Barbell \" + this.emptyBarWeight + \"kg | \";\n\n    plateCount.reverse().forEach(plate => {\n      if(plate.count > 0)\n      {\n        outputString = outputString + \" - \" + plate.weight + \"(x\" + plate.count + \")\"\n      }\n    })\n\n    return outputString;\n  }\n\n  generateDumbbellPlatesString(){\n    return \"\";\n  }\n\n  generateLoadingPinPlatesString(){\n    return \"\";\n  }\n\n  getPlateColor(plate) {\n    return plate.plateColor;\n  }\n}\n","<div class=\"container\">\n    <div class=\"unit-container\">\n        <a class=\"bartype-button bartype-active\" routerLink=\"/\" routerLinkActive=\"active\">Metric</a>\n    </div>\n\n    <div class=\"bartype-button-container\">\n        <h2>Bar Type:</h2>\n        <div class=\"bartype-button\" (click)=\"setBarType(0)\" [class.bartype-active]=\"barType === 0\">Barbell</div>\n        <div class=\"bartype-button\" (click)=\"setBarType(1)\" [class.bartype-active]=\"barType === 1\">Dumbbells</div>\n        <div class=\"bartype-button\" (click)=\"setBarType(2)\" [class.bartype-active]=\"barType === 2\">Loading Pin</div>\n    </div>\n    <h2>Plate Inventory:</h2>\n    <label for=\"barweight\">Empty Bar Weight: <input type=\"number\" id=\"barweight\" step=\"5\" min=\"0\" max=\"1000\" class=\"weight-input\" [(ngModel)]=\"emptyBarWeight\">kgs</label>\n    \n\n    <ul class=\"plate-inventory\">\n        <li>\n            <label for=\"fortyfive\">25kgs:  </label>\n            <input type=\"number\" id=\"fortyfive\" class=\"weight-input\" [(ngModel)]=\"plates[0].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"thirtyfive\">20kgs:  </label>\n            <input type=\"number\" id=\"thirtyfive\" class=\"weight-input\" [(ngModel)]=\"plates[1].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"twentyfive\">15kgs:  </label>\n            <input type=\"number\" id=\"twentyfive\" class=\"weight-input\" [(ngModel)]=\"plates[2].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"ten\">10kgs:  </label>\n            <input type=\"number\" id=\"ten\" class=\"weight-input\" [(ngModel)]=\"plates[3].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"five\">5kgs:   </label>\n            <input type=\"number\" id=\"five\" class=\"weight-input\" [(ngModel)]=\"plates[4].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>        \n        <li>\n            <label for=\"twoandahalf\">2.5kgs: </label>\n            <input type=\"number\" id=\"twoandahalf\" class=\"weight-input\" [(ngModel)]=\"plates[5].quantity\" step=\"{{weightStep}}\" min=\"0\" max=\"20\" />\n        </li>\n    </ul>\n\n    <h2>Target Weight:</h2>\n    <label for=\"target\">Desired Weight on Bar: <input type=\"number\" id=\"target-input\" name=\"target-input\" [(ngModel)]=\"targetWeight\" step=\"5\" min=\"{{ emptyBarWeight }}\" max=\"{{ getTotalWeight() }}\"/>kgs  </label>\n    <input type=\"range\" id=\"target\" class=\"slider\" name=\"target\" [(ngModel)]=\"targetWeight\" step=\"5\" min=\"{{ emptyBarWeight }}\" max=\"{{ getTotalWeight() }}\" required>\n\n    <h2>Weight Plate Output: {{ targetWeight }}kgs</h2>\n    \n    <app-diagram [barType]=\"barType\" \n                 [emptyBarWeight]=\"emptyBarWeight\" \n                 [requiredWeights]=\"requiredWeights\"></app-diagram>\n    <div class=\"centered plate-string\" >\n        <p>{{ getRequiredPlatesString() }}</p>\n    </div>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: true\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}